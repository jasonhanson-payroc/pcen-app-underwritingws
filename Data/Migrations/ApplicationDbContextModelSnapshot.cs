// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Underwriting.Data;

#nullable disable

namespace Underwriting.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f",
                            Name = "Underwriter",
                            NormalizedName = "UNDERWRITER"
                        },
                        new
                        {
                            Id = "39f6d8e5-9a2b-4c3f-a7e6-8b1d2c5e3f7a",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "61d470129b42b0f4965aad74",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "62420940457e21a2ca768c79",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "5d4a2dfdcd49961c2cd5729f",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "58574246aa45842a200103db",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "59691d964b9cfc16a848e768",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "585742f4aa45842a200193b2",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "58574197aa45842a20007798",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "597b2d274b9cfc2e6c819088",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "63740329467a12cd1cf74e41",
                            RoleId = "39f6d8e5-9a2b-4c3f-a7e6-8b1d2c5e3f7a"
                        },
                        new
                        {
                            UserId = "620bd70caf64c4562d58b84c",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "636c2737b81806331e91f99e",
                            RoleId = "39f6d8e5-9a2b-4c3f-a7e6-8b1d2c5e3f7a"
                        },
                        new
                        {
                            UserId = "63b6ec7733247bfd8698d629",
                            RoleId = "39f6d8e5-9a2b-4c3f-a7e6-8b1d2c5e3f7a"
                        },
                        new
                        {
                            UserId = "63a249ee424c29d968059d8d",
                            RoleId = "39f6d8e5-9a2b-4c3f-a7e6-8b1d2c5e3f7a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Underwriting.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "61d470129b42b0f4965aad74",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "880ec31a-137b-438c-8ab0-479452fcfb96",
                            DisplayName = "Alyssa Smith",
                            Email = "asmith@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ASMITH@I3VERTICALS.COM",
                            NormalizedUserName = "asmith@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDoag9DwY5rAfgBsRPShcZkYyzCipXLq8Ytniibi8SYLomRzqgpji4xMSaWWeweRZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "asmith@i3verticals.com"
                        },
                        new
                        {
                            Id = "62420940457e21a2ca768c79",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05a7a116-e654-4f6f-ae96-e8300a01984e",
                            DisplayName = "Angela Hardy",
                            Email = "astovallhardy@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ASTOVALLHARDY@I3VERTICALS.COM",
                            NormalizedUserName = "astovallhardy@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEIqup9KnjIVP3/a2V85Kbzqq0xGyFNxsaH3kC6dDyiaEDHYzVF4PR9LyqhZj+Y5GDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "astovallhardy@i3verticals.com"
                        },
                        new
                        {
                            Id = "5d4a2dfdcd49961c2cd5729f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf03e21a-b15c-4fe9-a68a-30d85b875d20",
                            DisplayName = "Benji Lamfers",
                            Email = "benji.lamfers@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BENJI.LAMFERS@I3VERTICALS.com",
                            NormalizedUserName = "benji.lamfers@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEM8+wXDt/kHpY25hAPOBXSJtQQMeiUY1vSkV49rxCj5qAQnECl9QJcEcFdRC+Grarw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "benji.lamfers@i3verticals.com"
                        },
                        new
                        {
                            Id = "58574246aa45842a200103db",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8126d374-9942-4ac5-a628-2dbe4edb35ff",
                            DisplayName = "Daniel Fonseca",
                            Email = "dfonseca@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DFONSECA@I3VERTICALS.COM",
                            NormalizedUserName = "dfonseca@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEMBDoSgYgDV2ibykPWa0hI4m+LTVB42m//5K/8GWDDJtt8oCIY8adCKVHlkHGY1uew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "dfonseca@i3verticals.com"
                        },
                        new
                        {
                            Id = "585742f4aa45842a200193b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9ac3274-68ab-4f09-9997-5f93fa3b0bec",
                            DisplayName = "Justin Esber",
                            Email = "justin.esber@payschools.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUSTIN.ESBER@PAYSCHOOLS.COM",
                            NormalizedUserName = "justin.esber@payschools.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEIxBLgK9rmInQLH11C4xrygmOJVkjdXrz1kF6zsJt40BaXs3o2q9AOYjcC1XHlEwuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "justin.esber@payschools.com"
                        },
                        new
                        {
                            Id = "59691d964b9cfc16a848e768",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6907389-dd3d-489f-9a1c-1dd9fda3f6ca",
                            DisplayName = "David Sowiak",
                            Email = "dsowiak@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DSOWIAK@I3VERTICALS.COM",
                            NormalizedUserName = "DSOWIAK@I3VERTICALS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFuMXfe17S2VKFydSYc1LR/IEs4bOvMLYXDPf5LNBDPzZucvYuSlO+OgTeCTUVpYUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "dsowiak@i3verticals.com"
                        },
                        new
                        {
                            Id = "58574197aa45842a20007798",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3621f3b-4828-4064-b3ae-647229de90c4",
                            DisplayName = "Lisa Reedy",
                            Email = "lreedy@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LREEDY@GMAIL.COM",
                            NormalizedUserName = "lreedy@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEL9FmvySfip/77gSByaGZpGtkdGh3qYUzIx6vzo4dqjph/ET0Y1jJJJrvUQPMTfbCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lreedy@gmail.com"
                        },
                        new
                        {
                            Id = "597b2d274b9cfc2e6c819088",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a06ec454-01cf-4a91-9565-96c864be18ab",
                            DisplayName = "Tee Locke",
                            Email = "tee.locke@neo.rr.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEE.LOCKE@NEO.RR.COM",
                            NormalizedUserName = "tee.locke@neo.rr.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEBU1ftWq45XENEPU+hxZULphze1t35F8bY4fZJhs46Op4B1YpTfd75F4QIhfwzIDtw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "tee.locke@neo.rr.com"
                        },
                        new
                        {
                            Id = "620bd70caf64c4562d58b84c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f47aedc4-48a8-4a5a-838f-616104c5f9fe",
                            DisplayName = "Christian Zarnke",
                            Email = "czarnke@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CZARNKE@I3VERTICALS.COM",
                            NormalizedUserName = "czarnke@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDNoIE4zpZ2dhLLmGZaIfS6JK86hNbcIgED1zctg3BmBONEcyIwgguLaz3bUAR0LcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "czarnke@i3verticals.com"
                        },
                        new
                        {
                            Id = "63a249ee424c29d968059d8d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e158007-8d6c-401c-ac68-8119ace3bacc",
                            DisplayName = "Sys Admin",
                            Email = "Sysadmin@i3Verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSADMIN@I3VERTICALS.COM",
                            NormalizedUserName = "Sysadmin@i3Verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEOZmD29p6PFnpzGwB3vIlS9Q6YRXg8tf13RBJeB77sWfqu0FwGgtNbKhDz/N8nnx7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Sysadmin@i3Verticals.com"
                        },
                        new
                        {
                            Id = "636c2737b81806331e91f99e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "341b66dc-0e65-4088-a6ec-1ad15cb24563",
                            DisplayName = "Vadeene Sisk",
                            Email = "vsisk@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VSISK@I3VERTICALS.COM",
                            NormalizedUserName = "vsisk@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDpQI89YMkUYKw3oiYChWUyuT+W2mUntVMdDgAmU3OOE12CEoruXqjZT5wu113r0uw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "vsisk@i3verticals.com"
                        },
                        new
                        {
                            Id = "63b6ec7733247bfd8698d629",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "578b5c2c-aa4b-466a-82e9-89d12aa361a9",
                            DisplayName = "Colleen Rumsey",
                            Email = "crumsey@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CRUMSEY@I3VERTICALS.COM",
                            NormalizedUserName = "crumsey@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEBsmaeCgaPyxgmzz+YmQ1ubJ3RyJHURix8dXM2iJaqV64vf84Q1f2AeVBCCqkdRrJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "crumsey@i3verticals.com"
                        },
                        new
                        {
                            Id = "63740329467a12cd1cf74e41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d762746f-c28f-4d7b-b392-b21e1ac8c466",
                            DisplayName = "Sonya Ridinger",
                            Email = "sridinger@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SRIDINGER@I3VERTICALS.COM",
                            NormalizedUserName = "sridinger@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ8aVCjTb2YQ8WrO7Z9RIyRmEevv9OtdvQvlnTfa7l3qNCNUnKXFtREQ68yPNnsctg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "sridinger@i3verticals.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
