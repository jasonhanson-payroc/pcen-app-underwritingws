// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Underwriting.Data;

#nullable disable

namespace Underwriting.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240628141019_SeedUserRoleDataToDataBase")]
    partial class SeedUserRoleDataToDataBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f",
                            Name = "Underwriter",
                            NormalizedName = "UNDERWRITER"
                        },
                        new
                        {
                            Id = "39f6d8e5-9a2b-4c3f-a7e6-8b1d2c5e3f7a",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Underwriting.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UAPIUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "58a3f7d6-2a7e-45f6-a5f4-6a8b93c8d9c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "066c39ca-45e7-426e-bff2-bed250ec4b5f",
                            DisplayName = "Alyssa Smith",
                            Email = "asmith@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ASMITH@I3VERTICALS.COM",
                            NormalizedUserName = "asmith@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEO3jw10OWznYRRpJbw7O1c2yTT1ikL4pzDRQmmbafdAeDeW72BBpok9y1DQxNNaI8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "61d470129b42b0f4965aad74",
                            UserName = "asmith@i3verticals.com"
                        },
                        new
                        {
                            Id = "1f8c93bb-92a0-4e61-a4e6-7b28d61f0d71",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38dc1495-a935-4851-b25f-9fd9ccd7a991",
                            DisplayName = "Angela Hardy",
                            Email = "astovallhardy@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ASTOVALLHARDY@I3VERTICALS.COM",
                            NormalizedUserName = "astovallhardy@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEL3AFSYsXtl3nZIJgGFb/4flIfJoNGpf1OWamYVl4esOse1SwgfMQC/THG+YJPqltw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "62420940457e21a2ca768c79",
                            UserName = "astovallhardy@i3verticals.com"
                        },
                        new
                        {
                            Id = "2a9f4b60-3c8e-41c7-9a7b-52341bfa1b62",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3cf6a825-5b75-444f-97e0-8955f0d19df9",
                            DisplayName = "Benji Lamfers",
                            Email = "benji.lamfers@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BENJI.LAMFERS@I3VERTICALS.com",
                            NormalizedUserName = "benji.lamfers@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAENHrtA/RgtCxmpxWXh/W6b1q317o8DpVvwA1B8ypN4G1XT6l+Ci36yLuUWR3T6tFfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "5d4a2dfdcd49961c2cd5729f",
                            UserName = "benji.lamfers@i3verticals.com"
                        },
                        new
                        {
                            Id = "4e9b671d-865e-4c6a-b283-1c5d214c5939",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e74d2923-24e0-4bcb-9452-b5183dde164f",
                            DisplayName = "Daniel Fonseca",
                            Email = "dfonseca@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DFONSECA@I3VERTICALS.COM",
                            NormalizedUserName = "dfonseca@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEAg/v58IJrMFMvG5f/shhlxlNAKwrgmLgt/CdDWEV1OLe4L6W11eEuyIrSSgIVeoPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "58574246aa45842a200103db",
                            UserName = "dfonseca@i3verticals.com"
                        },
                        new
                        {
                            Id = "73e52b93-3ec5-47a6-85a1-4eb6dc3e6e34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "339085ea-1517-406e-87a9-c6a12c924cfd",
                            DisplayName = "Justin Esber",
                            Email = "justin.esber@payschools.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUSTIN.ESBER@PAYSCHOOLS.COM",
                            NormalizedUserName = "justin.esber@payschools.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEIfSpUMmAHHyB+AHIKDx8qTV6ytWFkFHm1ChH8LQvTTXQRgkHOxFDwcpiUuaPsMpgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "585742f4aa45842a200193b2",
                            UserName = "justin.esber@payschools.com"
                        },
                        new
                        {
                            Id = "87ad364d-53c9-4698-b0a1-c01f91c6f4b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2a3c6d7-28ca-47e8-b1d5-9fe0fdad0a8d",
                            DisplayName = "Lisa Reedy",
                            Email = "lreedy@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LREEDY@GMAIL.COM",
                            NormalizedUserName = "lreedy@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEI5Jmsmftu3uvM31gmo5x+tMwZ5IjSNrnbmhFZmc0pShKaDAgJfMI9Oia2WI868toA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "58574197aa45842a20007798",
                            UserName = "lreedy@gmail.com"
                        },
                        new
                        {
                            Id = "9b6e1d64-0b93-4ba1-81a9-32d36e2d6e49",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd6ac6bc-61bd-49fd-b755-33c58774ee93",
                            DisplayName = "Tee Locke",
                            Email = "tee.locke@neo.rr.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEE.LOCKE@NEO.RR.COM",
                            NormalizedUserName = "tee.locke@neo.rr.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEBFT4C9VjwRCYIBHT6n0dc7VLvY48ulxLbJLqySmaKFP6SBCUauQfhxFXv8dzyoC6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "597b2d274b9cfc2e6c819088",
                            UserName = "tee.locke@neo.rr.com"
                        },
                        new
                        {
                            Id = "b0145c62-e346-4ea8-ace2-6d82f84c9e2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eddcac0f-2b24-4d98-9905-cc05500e9b0d",
                            DisplayName = "Christian Zarnke",
                            Email = "czarnke@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CZARNKE@I3VERTICALS.COM",
                            NormalizedUserName = "czarnke@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEN3i823WfoRE5mVLNjDxbJWyS/Ux+/NRt1mSQI2HrZZ3w5DCJK3WEmTSzORAQ07dSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "620bd70caf64c4562d58b84c",
                            UserName = "czarnke@i3verticals.com"
                        },
                        new
                        {
                            Id = "c83b57ef-024b-48d9-939d-5b8d8e0b7d23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a90a65fc-83f6-4642-80bf-a8b28d743a62",
                            DisplayName = "Sys Admin",
                            Email = "Sysadmin@i3Verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSADMIN@I3VERTICALS.COM",
                            NormalizedUserName = "Sysadmin@i3Verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEI0WEYYYoeravx81WPikJURjRysM+5TADBH/6LgvaG/T02gVgWjS6O1w2hwOaCwUgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "63a249ee424c29d968059d8d",
                            UserName = "Sysadmin@i3Verticals.com"
                        },
                        new
                        {
                            Id = "df9f1ac6-616b-44b0-a1de-85a56c7d4a58",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65376c28-ac6e-48b3-8a32-d45168c0b96d",
                            DisplayName = "Vadeene Sisk",
                            Email = "vsisk@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VSISK@I3VERTICALS.COM",
                            NormalizedUserName = "vsisk@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAECuePUD/XgqY67/v5JtckDUsRSqqytjeFBMvYMoyvG6vEItyXS2c/Q3QqzFju8yfPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "636c2737b81806331e91f99e",
                            UserName = "vsisk@i3verticals.com"
                        },
                        new
                        {
                            Id = "f6e134e9-402b-4782-bca6-7e1f9a5d6c1f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d3d6f74-e217-488a-92eb-9e54c0bc9b11",
                            DisplayName = "Colleen Rumsey",
                            Email = "crumsey@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CRUMSEY@I3VERTICALS.COM",
                            NormalizedUserName = "crumsey@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEARqHlztABVNG0kGxUb/rHImmq1k3V1M/HlSvQ+ZSRm/Ncv9oguX5a+q5/BNQ06ARw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "63b6ec7733247bfd8698d629",
                            UserName = "crumsey@i3verticals.com"
                        },
                        new
                        {
                            Id = "e207c07e-32d2-45b8-a0a2-ef2ca333f2c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb3fff00-4ec9-46d1-a1f6-c7aca01c4a2d",
                            DisplayName = "Sonya Ridinger",
                            Email = "sridinger@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SRIDINGER@I3VERTICALS.COM",
                            NormalizedUserName = "sridinger@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEPqFmsiim3X3IzM0xQ+vbY+kwssVjCXTm/wfGb7GK4ulnOoWK/WNfQPfQLSxJ+es4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "61d470129b42b0f4965aad74",
                            UserName = "sridinger@i3verticals.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
