// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Underwriting.Data;

#nullable disable

namespace Underwriting.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250924200634_Underwriting-UI")]
    partial class UnderwritingUI
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f",
                            Name = "Underwriter",
                            NormalizedName = "UNDERWRITER"
                        },
                        new
                        {
                            Id = "39f6d8e5-9a2b-4c3f-a7e6-8b1d2c5e3f7a",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "61d470129b42b0f4965aad74",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "62420940457e21a2ca768c79",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "5d4a2dfdcd49961c2cd5729f",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "58574246aa45842a200103db",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "59691d964b9cfc16a848e768",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "585742f4aa45842a200193b2",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "58574197aa45842a20007798",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "597b2d274b9cfc2e6c819088",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "63740329467a12cd1cf74e41",
                            RoleId = "39f6d8e5-9a2b-4c3f-a7e6-8b1d2c5e3f7a"
                        },
                        new
                        {
                            UserId = "620bd70caf64c4562d58b84c",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "636c2737b81806331e91f99e",
                            RoleId = "39f6d8e5-9a2b-4c3f-a7e6-8b1d2c5e3f7a"
                        },
                        new
                        {
                            UserId = "63b6ec7733247bfd8698d629",
                            RoleId = "39f6d8e5-9a2b-4c3f-a7e6-8b1d2c5e3f7a"
                        },
                        new
                        {
                            UserId = "63a249ee424c29d968059d8d",
                            RoleId = "39f6d8e5-9a2b-4c3f-a7e6-8b1d2c5e3f7a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Underwriting.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "61d470129b42b0f4965aad74",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85d6d280-7e0f-46c5-a169-876a805be704",
                            DisplayName = "Alyssa Smith",
                            Email = "asmith@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ASMITH@I3VERTICALS.COM",
                            NormalizedUserName = "asmith@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEKPA7KxjP+dfwy7bybLpq0ttJEkhF/Ik7KlgnDGXntX1mODUXuEsP9ApNktcMQuutA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "asmith@i3verticals.com"
                        },
                        new
                        {
                            Id = "62420940457e21a2ca768c79",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c177df7b-a431-42d8-b0b9-fd5f04de80d5",
                            DisplayName = "Angela Hardy",
                            Email = "astovallhardy@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ASTOVALLHARDY@I3VERTICALS.COM",
                            NormalizedUserName = "astovallhardy@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELu4z7K8yuOl3qUuPZeZ+58SaSsgSa/f7QfkvuaDfOT3ykLFUNCDDO8olSqm/EseVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "astovallhardy@i3verticals.com"
                        },
                        new
                        {
                            Id = "5d4a2dfdcd49961c2cd5729f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d106f094-cf37-4743-9feb-6c45c485f585",
                            DisplayName = "Benji Lamfers",
                            Email = "benji.lamfers@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BENJI.LAMFERS@I3VERTICALS.com",
                            NormalizedUserName = "benji.lamfers@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEKeDXIqquZsLPHBwG9+atF7w92h9rosLdCNBlBeuxllTqP8CGm/twdM43+NI6vl30Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "benji.lamfers@i3verticals.com"
                        },
                        new
                        {
                            Id = "58574246aa45842a200103db",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46e235c8-f3d5-4a7c-8405-3abb3fd451e5",
                            DisplayName = "Daniel Fonseca",
                            Email = "dfonseca@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DFONSECA@I3VERTICALS.COM",
                            NormalizedUserName = "dfonseca@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEKaP2ajb8CFiFEADPKzZkpGj8LzplTA3eWwd9+j6ALV1ZhLKR1V+DhJfme0nXFZPww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "dfonseca@i3verticals.com"
                        },
                        new
                        {
                            Id = "585742f4aa45842a200193b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc8ebe47-0287-4cdb-8676-b28ffedb9ddc",
                            DisplayName = "Justin Esber",
                            Email = "justin.esber@payschools.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUSTIN.ESBER@PAYSCHOOLS.COM",
                            NormalizedUserName = "justin.esber@payschools.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEOI82vuTjNRSZUBtZxSpk4a39EnSeTHzO7Idaj7lmYUTuCwAQyQcXMyNbwxr2od27w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "justin.esber@payschools.com"
                        },
                        new
                        {
                            Id = "59691d964b9cfc16a848e768",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dfcc4e04-2ef2-4b3d-b8a2-8e07d92d36c4",
                            DisplayName = "David Sowiak",
                            Email = "dsowiak@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DSOWIAK@I3VERTICALS.COM",
                            NormalizedUserName = "DSOWIAK@I3VERTICALS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHGfmZ4Hc3xJ36lo/ChAJxVrUWvgSzAABYT5aiuvth9FBsStay2DJMvG/jdBE7XM/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "dsowiak@i3verticals.com"
                        },
                        new
                        {
                            Id = "58574197aa45842a20007798",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a615025a-f54a-42e0-bdd8-60c21790cc64",
                            DisplayName = "Lisa Reedy",
                            Email = "lreedy@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LREEDY@GMAIL.COM",
                            NormalizedUserName = "lreedy@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEJjdcImdvuVJ/t0MsitoyQebmfVWSNDHegQabJYclEJkAaBXK69njuNRqO5O05ClIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lreedy@gmail.com"
                        },
                        new
                        {
                            Id = "597b2d274b9cfc2e6c819088",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b519994f-b64c-4819-892f-1633b7b6e2ff",
                            DisplayName = "Tee Locke",
                            Email = "tee.locke@neo.rr.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEE.LOCKE@NEO.RR.COM",
                            NormalizedUserName = "tee.locke@neo.rr.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELlbj8nuzPSjBwM3nOJk+zmSuN112Z1jogvqFdw7ziQNEKpEemXPsyy6M1BHW4Pu8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "tee.locke@neo.rr.com"
                        },
                        new
                        {
                            Id = "620bd70caf64c4562d58b84c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b0fa48d-bf45-4d6a-a8f9-754087004e77",
                            DisplayName = "Christian Zarnke",
                            Email = "czarnke@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CZARNKE@I3VERTICALS.COM",
                            NormalizedUserName = "czarnke@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEGfO6lH79Rll3vejGifqp8dfvxpJUwJ/O2gb9nRSFS05xKr+/0JbVJnWTrtOPDUz5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "czarnke@i3verticals.com"
                        },
                        new
                        {
                            Id = "63a249ee424c29d968059d8d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b6d8a8d-f577-48ee-952a-91725dd6caa4",
                            DisplayName = "Sys Admin",
                            Email = "Sysadmin@i3Verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSADMIN@I3VERTICALS.COM",
                            NormalizedUserName = "Sysadmin@i3Verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEA4ePxsH+MaW0tinkFf1IWWsCj4oWCYKZYjss+RBTduxO0vduZOGHa3DP7c9GZYpOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Sysadmin@i3Verticals.com"
                        },
                        new
                        {
                            Id = "636c2737b81806331e91f99e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4282cd48-64e5-4ce3-aed7-513f8d3d232d",
                            DisplayName = "Vadeene Sisk",
                            Email = "vsisk@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VSISK@I3VERTICALS.COM",
                            NormalizedUserName = "vsisk@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAECz/zol+0ruH7L5KRgNzzuhzfLUYGTy87sXR3jrQEfPyy27odsh0jg5dQpMXGKH5Hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "vsisk@i3verticals.com"
                        },
                        new
                        {
                            Id = "63b6ec7733247bfd8698d629",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "384768ec-0b91-43ed-9218-5bf6b25a6d1a",
                            DisplayName = "Colleen Rumsey",
                            Email = "crumsey@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CRUMSEY@I3VERTICALS.COM",
                            NormalizedUserName = "crumsey@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAENatiTdbPutiixYOY84/XFZffUScODGHjKl02v6S4+c65d2qMs+alWvWeOLF0a3DAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "crumsey@i3verticals.com"
                        },
                        new
                        {
                            Id = "63740329467a12cd1cf74e41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8769605d-119f-428b-8ea7-19a923bb410e",
                            DisplayName = "Sonya Ridinger",
                            Email = "sridinger@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SRIDINGER@I3VERTICALS.COM",
                            NormalizedUserName = "sridinger@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDR89mg9PWuT91oKzjSIntSnSry0ezGkQVs6TZaPSqzGJqFBaNjn/SCdwtI1OJuvvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "sridinger@i3verticals.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
