// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Underwriting.Data;

#nullable disable

namespace Underwriting.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240628141537_MappingSysAdminUserRole")]
    partial class MappingSysAdminUserRole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f",
                            Name = "Underwriter",
                            NormalizedName = "UNDERWRITER"
                        },
                        new
                        {
                            Id = "39f6d8e5-9a2b-4c3f-a7e6-8b1d2c5e3f7a",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1f8c93bb-92a0-4e61-a4e6-7b28d61f0d71",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "2a9f4b60-3c8e-41c7-9a7b-52341bfa1b62",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "4e9b671d-865e-4c6a-b283-1c5d214c5939",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "58a3f7d6-2a7e-45f6-a5f4-6a8b93c8d9c7",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "73e52b93-3ec5-47a6-85a1-4eb6dc3e6e34",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "87ad364d-53c9-4698-b0a1-c01f91c6f4b0",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "9b6e1d64-0b93-4ba1-81a9-32d36e2d6e49",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "b0145c62-e346-4ea8-ace2-6d82f84c9e2c",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "c83b57ef-024b-48d9-939d-5b8d8e0b7d23",
                            RoleId = "39f6d8e5-9a2b-4c3f-a7e6-8b1d2c5e3f7a"
                        },
                        new
                        {
                            UserId = "df9f1ac6-616b-44b0-a1de-85a56c7d4a58",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        },
                        new
                        {
                            UserId = "e207c07e-32d2-45b8-a0a2-ef2ca333f2c2",
                            RoleId = "39f6d8e5-9a2b-4c3f-a7e6-8b1d2c5e3f7a"
                        },
                        new
                        {
                            UserId = "f6e134e9-402b-4782-bca6-7e1f9a5d6c1f",
                            RoleId = "7cd35e1b-5f72-470b-9e1a-8f6d4b3e5a3f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Underwriting.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UAPIUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "58a3f7d6-2a7e-45f6-a5f4-6a8b93c8d9c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32af9380-fd08-4a51-90a6-0edc6c91f53c",
                            DisplayName = "Alyssa Smith",
                            Email = "asmith@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ASMITH@I3VERTICALS.COM",
                            NormalizedUserName = "asmith@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEOacXvKdv/3YsXf0xkSganbdrM0E7RFuVGgHDwRlrMbzGYeAqmmcc03lQXjwMtlCpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "61d470129b42b0f4965aad74",
                            UserName = "asmith@i3verticals.com"
                        },
                        new
                        {
                            Id = "1f8c93bb-92a0-4e61-a4e6-7b28d61f0d71",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75ec5316-72b5-42b1-8ed4-40cfa1f62d13",
                            DisplayName = "Angela Hardy",
                            Email = "astovallhardy@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ASTOVALLHARDY@I3VERTICALS.COM",
                            NormalizedUserName = "astovallhardy@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEHXOp00+DT+jAp9pf8ld85H79I0579UqVJzxWauLChjglHGPfRxrQwhZl+6yr1jlcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "62420940457e21a2ca768c79",
                            UserName = "astovallhardy@i3verticals.com"
                        },
                        new
                        {
                            Id = "2a9f4b60-3c8e-41c7-9a7b-52341bfa1b62",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5936ee9a-d40a-43dd-9ccb-722683281a63",
                            DisplayName = "Benji Lamfers",
                            Email = "benji.lamfers@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BENJI.LAMFERS@I3VERTICALS.com",
                            NormalizedUserName = "benji.lamfers@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEMERHSZOACss5mMylKDmswRlnkimi7Hs9/1VAgp4jhRgHf/zp7Xx/OlUUTNW8dsx+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "5d4a2dfdcd49961c2cd5729f",
                            UserName = "benji.lamfers@i3verticals.com"
                        },
                        new
                        {
                            Id = "4e9b671d-865e-4c6a-b283-1c5d214c5939",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8da2a52f-ce4c-4280-8ad0-da56f32237b6",
                            DisplayName = "Daniel Fonseca",
                            Email = "dfonseca@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DFONSECA@I3VERTICALS.COM",
                            NormalizedUserName = "dfonseca@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELpGIwAMDkt/SoSYgBaPpol37pN8l2RcOBHZ3YyRVZC7DEB5FKHnBnO8tOZRIsLB9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "58574246aa45842a200103db",
                            UserName = "dfonseca@i3verticals.com"
                        },
                        new
                        {
                            Id = "73e52b93-3ec5-47a6-85a1-4eb6dc3e6e34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5cb3d14-d748-4e31-b3cc-d95a0f60d75e",
                            DisplayName = "Justin Esber",
                            Email = "justin.esber@payschools.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUSTIN.ESBER@PAYSCHOOLS.COM",
                            NormalizedUserName = "justin.esber@payschools.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEATny0J9En9YNWqhdd6luMZrIrvJQOjWgR88v+ie7FkV9sahhyw86JpSI1rNYbw0Lw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "585742f4aa45842a200193b2",
                            UserName = "justin.esber@payschools.com"
                        },
                        new
                        {
                            Id = "87ad364d-53c9-4698-b0a1-c01f91c6f4b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f86388b-60af-4700-97fd-03066e5dc50b",
                            DisplayName = "Lisa Reedy",
                            Email = "lreedy@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LREEDY@GMAIL.COM",
                            NormalizedUserName = "lreedy@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEKmB6eJZAFHPi6o94mVXha3guLfR5Jf8fn8G0CmMDAeJ+7W0M2LgcqW/QJbSbsDZMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "58574197aa45842a20007798",
                            UserName = "lreedy@gmail.com"
                        },
                        new
                        {
                            Id = "9b6e1d64-0b93-4ba1-81a9-32d36e2d6e49",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ef4ed2f-4b0a-4e27-817c-9079088c9e34",
                            DisplayName = "Tee Locke",
                            Email = "tee.locke@neo.rr.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEE.LOCKE@NEO.RR.COM",
                            NormalizedUserName = "tee.locke@neo.rr.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEN7cP3Hd1n0X6LvazKcDDw8KyFrWDz41BvMPiiulAMb/2JeVd8MID8gSdDuUZpWutQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "597b2d274b9cfc2e6c819088",
                            UserName = "tee.locke@neo.rr.com"
                        },
                        new
                        {
                            Id = "b0145c62-e346-4ea8-ace2-6d82f84c9e2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69933d0a-9a52-41ce-9ab3-76245d8eabaa",
                            DisplayName = "Christian Zarnke",
                            Email = "czarnke@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CZARNKE@I3VERTICALS.COM",
                            NormalizedUserName = "czarnke@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEJTUQERdOB7O5aHM6wNEB14+JwJl6xnWgGaV9XSCSMFQclYy7OMgNg1wlcq4SR5pjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "620bd70caf64c4562d58b84c",
                            UserName = "czarnke@i3verticals.com"
                        },
                        new
                        {
                            Id = "c83b57ef-024b-48d9-939d-5b8d8e0b7d23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff6774a9-34c0-4ce9-92e6-5f2889a0abde",
                            DisplayName = "Sys Admin",
                            Email = "Sysadmin@i3Verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSADMIN@I3VERTICALS.COM",
                            NormalizedUserName = "Sysadmin@i3Verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAENGXfT80YGPx3nC4Hlpi+BmwHr3htgFefQBlpfSg26egc354Mrp1dCOcrZ4Y5Z/XCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "63a249ee424c29d968059d8d",
                            UserName = "Sysadmin@i3Verticals.com"
                        },
                        new
                        {
                            Id = "df9f1ac6-616b-44b0-a1de-85a56c7d4a58",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfe486ad-59a3-4563-b80c-ca4e9027642b",
                            DisplayName = "Vadeene Sisk",
                            Email = "vsisk@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VSISK@I3VERTICALS.COM",
                            NormalizedUserName = "vsisk@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEO8FSJw+AlEfvaPE1zycaaEfT9cWuVVzXRP7gg6uFp8g8OfdfojkquJeHbJUwFCVhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "636c2737b81806331e91f99e",
                            UserName = "vsisk@i3verticals.com"
                        },
                        new
                        {
                            Id = "f6e134e9-402b-4782-bca6-7e1f9a5d6c1f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19e69c5a-8cd4-466e-8fd0-3b696c5f07e8",
                            DisplayName = "Colleen Rumsey",
                            Email = "crumsey@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CRUMSEY@I3VERTICALS.COM",
                            NormalizedUserName = "crumsey@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDCsZdDD9oVchfyuQmTaJXW9SRwqb39rJgLwdqf0cOpw3u7XNTWpe3BCiMNVrvGbXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "63b6ec7733247bfd8698d629",
                            UserName = "crumsey@i3verticals.com"
                        },
                        new
                        {
                            Id = "e207c07e-32d2-45b8-a0a2-ef2ca333f2c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fd75cc1-40b8-4773-ae49-fe84c5b658f9",
                            DisplayName = "Sonya Ridinger",
                            Email = "sridinger@i3verticals.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SRIDINGER@I3VERTICALS.COM",
                            NormalizedUserName = "sridinger@i3verticals.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEH7M6tIrj1U/WlMU7pk/DqKbSQYgc4ZBZTSf+BCWr6jvnO0msDnouivasL/wprG1Cw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UAPIUserId = "61d470129b42b0f4965aad74",
                            UserName = "sridinger@i3verticals.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Underwriting.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
