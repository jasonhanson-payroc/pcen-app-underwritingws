@page "/Account/ManageUsers"
<h3>Manage Users</h3>

@attribute [Authorize(Roles = "Manager")]

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Underwriting.Data
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.JSInterop
@rendermode InteractiveServer

@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext _ApplicationDbContext
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Underwriting</PageTitle>
<div>
    <a href="Account/AddUser" class="btn btn-primary" style="float:right;margin-bottom:10px;">Add User</a>
</div>
<div class="Qucikgridtbl">
    <QuickGrid Items="_UserInfo.AsQueryable()" Pagination="pagination">
        <PropertyColumn Property="a=>a.email" Title="Email"></PropertyColumn>
        <PropertyColumn Property="a=>a.display_name" Title="Username"></PropertyColumn>
        <PropertyColumn Property="a=>a.role" Title="Role"></PropertyColumn>
        <TemplateColumn>
            <div style="text-align:center">
                <a href="Account/EditUser?Emailid=@context.email" class="btn btn-primary" style="width:31%">Edit</a>               
                <button class="btn btn-danger" @onclick="(()=>DeleteEmployee(context))">Delete</button>
            </div>
          
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="@pagination"></Paginator>
</div>
@code {

    List<ApplicationUser> _ApplicationUser = new List<ApplicationUser>();
    List<User> _UserInfo = new List<User>();
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    [Inject]
    private IJSRuntime JS { get; set; } = default!;
    private IJSObjectReference? _jsModule;

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    _jsModule ??= await JSRuntime.InvokeAsync<IJSObjectReference>("import", "js/ManageUsers.js");
    //}

    protected override async Task OnInitializedAsync()
    {
        _ApplicationUser = _ApplicationDbContext.ApplicationUsers.ToList();
        var Role = _ApplicationDbContext.Roles.ToList();
        var UserRole = _ApplicationDbContext.UserRoles.ToList();

        var UserDet = from a in UserRole
                      join b in Role on a.RoleId equals b.Id
                      select new
                      {
                          role = b.Name,
                          id = a.UserId,
                         
                      };

        _UserInfo = (from a in _ApplicationUser
                     join b in UserDet on a.Id equals b.id into ab
                     from b in ab.DefaultIfEmpty()
                     select new User
                     {
                         role = b != null ? b.role : "-",
                         email = a.Email,
                         id = a.Id,
                         display_name = a.DisplayName,
                     }).ToList();


        if (_ApplicationUser is null)
        {
            RedirectManager.RedirectTo("");
        }
    }
    private async Task DeleteEmployee(User User)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("showDeleteConfirmation", new Object[] { "Are you sure you want to delete this record?" });
        if (confirmed)
        {
            var Userid = _ApplicationDbContext.ApplicationUsers.Where(s => s.Email == User.email).First();
            _ApplicationDbContext.ApplicationUsers.Remove(Userid);
            await _ApplicationDbContext.SaveChangesAsync();
            Navigation.NavigateTo("/Account/ManageUsers", forceLoad: true);
        }
    }
    private void UpdateEmployee(User User)
    {
        Navigation.NavigateTo("/Account/EditUser?Emailid=" + User.email + "", forceLoad: true);
    }

}
